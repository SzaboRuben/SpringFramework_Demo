<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	   		http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context-3.1.xsd">


<!-- Testing init and destroy methods : BeanLifeCycleDemoApp 
NOTE : our own destroy method can be called only if the scope is default (singleton)
If the scope is set to e.g. prototype our own destroy method will not be called.
What we can do is to override the DisposableBean interface's "destroy()" method.
In that case that will be the called destroy-methodAdditional
Additional implementation of MyCustomBeanProcessor however is needed -->



<bean id="myFortuneService"
class="com.mindworks.springdemo.HappyFortuneService">
</bean>

<!---->
<bean id="myCoach"
class="com.mindworks.springdemo.TrackCoach"
init-method="doMyStartupStuff"
destroy-method="destroy"
scope="singleton">
<!-- Implementing constructor injection to TrackCoach's class' constructor -->
<constructor-arg ref="myFortuneService"/>
</bean>

<!-- Bean custom processor to handle calling destroy methods on prototype scoped beans -->
        <bean id="customProcessor"
    		class="com.mindworks.springdemo.MyCustomBeanProcessor">
   	</bean>





</beans>